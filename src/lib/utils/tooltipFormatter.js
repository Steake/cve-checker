/**
 * Formats CVE details into a tooltip string
 * @param {any} cveDetails
 * @returns {string}
 */
export function formatCveTooltip(cveDetails) {
    if (!cveDetails) {
        return 'Loading vulnerability details...';
    }

    if (cveDetails.error) {
        return 'Vulnerability details temporarily unavailable';
    }

    const parts = [];

    // Add severity if available
    if (cveDetails.severity) {
        parts.push(`Severity: ${cveDetails.severity}`);
    }

    // Add summary
    if (cveDetails.summary) {
        parts.push(`\nDescription:\n${cveDetails.summary}`);
    }

    // Add weaknesses if available
    if (cveDetails.weaknesses?.length) {
        const weaknesses = cveDetails.weaknesses
            .slice(0, 2)
            .map(w => `â€¢ ${w.description?.[0]?.value || w.type}`)
            .join('\n');
        parts.push(`\nWeaknesses:\n${weaknesses}`);
    }

    // Add dates if available
    if (cveDetails.published) {
        parts.push(`\nPublished: ${new Date(cveDetails.published).toLocaleDateString()}`);
    }
    if (cveDetails.lastModified) {
        parts.push(`Last Modified: ${new Date(cveDetails.lastModified).toLocaleDateString()}`);
    }

    // Add references count if available
    if (cveDetails.references?.length) {
        parts.push(`\nReferences: ${cveDetails.references.length} source${
            cveDetails.references.length === 1 ? '' : 's'
        }`);
    }

    // Add stale data warning if applicable
    if (cveDetails.stale) {
        parts.push('\n\nNote: Using cached data. Live data temporarily unavailable.');
    }

    return parts.join('\n');
}