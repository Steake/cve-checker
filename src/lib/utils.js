/**
 * Returns a human-readable time difference
 * @param {string | Date} date
 * @returns {string}
 */
export function getTimeAgo(date) {
	const seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);
	
	const intervals = [
		{ label: 'year', seconds: 31536000 },
		{ label: 'month', seconds: 2592000 },
		{ label: 'week', seconds: 604800 },
		{ label: 'day', seconds: 86400 },
		{ label: 'hour', seconds: 3600 },
		{ label: 'minute', seconds: 60 },
		{ label: 'second', seconds: 1 }
	];

	for (const interval of intervals) {
		const count = Math.floor(seconds / interval.seconds);
		if (count >= 1) {
			return `${count} ${interval.label}${count !== 1 ? 's' : ''} ago`;
		}
	}
	return 'just now';
}

/**
 * Filters a date based on the selected filter
 * @param {string | Date} date
 * @param {string} filter
 * @returns {boolean}
 */
export function filterByDate(date, filter) {
	const itemDate = new Date(date);
	const now = new Date();
	const dayInMs = 24 * 60 * 60 * 1000;

	switch (filter) {
		case '7d':
			return now.getTime() - itemDate.getTime() <= 7 * dayInMs;
		case '30d':
			return now.getTime() - itemDate.getTime() <= 30 * dayInMs;
		case '90d':
			return now.getTime() - itemDate.getTime() <= 90 * dayInMs;
		case 'year':
			return itemDate.getFullYear() === now.getFullYear();
		default:
			return true;
	}
}